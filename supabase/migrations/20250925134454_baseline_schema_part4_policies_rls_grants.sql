-- Baseline schema (part 4): policies, RLS, grants, default privileges
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Policies
CREATE POLICY "Admins and reviewers can manage all blog posts" ON public.blog_posts USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = ANY (ARRAY['admin','reviewer']))));
CREATE POLICY "Admins and reviewers can manage all projects" ON public.projects USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = ANY (ARRAY['admin','reviewer']))));
CREATE POLICY "Admins can manage all comments" ON public.blog_comments USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Admins can manage all reviews" ON public.project_reviews USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Admins can manage roles and active" ON public.users FOR UPDATE USING ((((current_setting('request.jwt.claims', true))::jsonb ->> 'role') = 'admin')) WITH CHECK (true);
CREATE POLICY "Admins can read all rows" ON public.users FOR SELECT USING ((((current_setting('request.jwt.claims', true))::jsonb ->> 'role') = 'admin'));
CREATE POLICY "Admins can update project status" ON public.projects FOR UPDATE USING ((EXISTS (SELECT 1 FROM public.users u WHERE (u.id = auth.uid()) AND (u.role::text = 'admin'))));
CREATE POLICY "Admins can view all downloads" ON public.downloads FOR SELECT USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Admins can view all transactions" ON public.transactions FOR SELECT USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Admins can view and process all withdrawals" ON public.withdrawals USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Allow authenticated users to insert programs" ON public.programs FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Approved blog comments are viewable by everyone" ON public.blog_comments FOR SELECT USING ((status::text = 'approved'));
CREATE POLICY "Approved project reviews are viewable by everyone" ON public.project_reviews FOR SELECT USING ((status::text = 'approved'));
CREATE POLICY "Approved projects are viewable by everyone" ON public.projects FOR SELECT USING (((status::text = 'approved') AND (is_public = true)));
CREATE POLICY "Authenticated can increment views" ON public.projects FOR UPDATE USING ((auth.role() = 'authenticated'));
CREATE POLICY "Contributors can delete own projects" ON public.projects FOR DELETE USING ((auth.uid() = contributor_id));
CREATE POLICY "Contributors can update own projects" ON public.projects FOR UPDATE USING ((auth.uid() = contributor_id));
CREATE POLICY "Courses are viewable by everyone" ON public.courses FOR SELECT USING (true);
CREATE POLICY "Only admins can modify courses" ON public.courses USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Only admins can modify programs" ON public.programs USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Only admins can modify universities" ON public.universities USING (((auth.role() = 'authenticated') AND ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Programs are viewable by everyone" ON public.programs FOR SELECT USING (true);
CREATE POLICY "Project owners can create versions" ON public.project_versions FOR INSERT WITH CHECK ((auth.uid() IN (SELECT projects.contributor_id FROM public.projects WHERE projects.id = project_versions.project_id)));
CREATE POLICY "Project versions are viewable by project owners and admins" ON public.project_versions FOR SELECT USING (((auth.uid() IN (SELECT projects.contributor_id FROM public.projects WHERE projects.id = project_versions.project_id)) OR ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Published blog posts are viewable by everyone" ON public.blog_posts FOR SELECT USING ((status::text = 'published'));
CREATE POLICY "Team members are viewable by team members" ON public.team_members FOR SELECT USING (((auth.uid() IN (SELECT tm.user_id FROM public.team_members tm WHERE tm.team_id = tm.team_id)) OR ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Team owners can manage team members" ON public.team_members USING (((auth.uid() IN (SELECT tm.user_id FROM public.team_members tm WHERE tm.team_id = tm.team_id AND tm.role::text = ANY (ARRAY['owner','admin']::text[]))) OR ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Team owners can manage their teams" ON public.teams USING (((auth.uid() IN (SELECT team_members.user_id FROM public.team_members WHERE team_members.team_id = teams.id AND team_members.role::text = ANY (ARRAY['owner','admin']::text[]))) OR ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Teams are viewable by team members" ON public.teams FOR SELECT USING (((auth.uid() IN (SELECT team_members.user_id FROM public.team_members WHERE team_members.team_id = teams.id)) OR ((SELECT users.role FROM public.users WHERE users.id = auth.uid())::text = 'admin')));
CREATE POLICY "Universities are viewable by everyone" ON public.universities FOR SELECT USING (true);
CREATE POLICY "Users can create blog posts" ON public.blog_posts FOR INSERT WITH CHECK ((auth.uid() = author_id));
CREATE POLICY "Users can create comments" ON public.blog_comments FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create downloads" ON public.downloads FOR INSERT WITH CHECK ((auth.uid() = downloaded_by));
CREATE POLICY "Users can create projects" ON public.projects FOR INSERT WITH CHECK ((auth.uid() = contributor_id));
CREATE POLICY "Users can create reviews for projects they downloaded" ON public.project_reviews FOR INSERT WITH CHECK (((auth.uid() = reviewer_id) AND (EXISTS (SELECT 1 FROM public.downloads WHERE downloads.project_id = project_reviews.project_id AND downloads.downloaded_by = auth.uid()))));
CREATE POLICY "Users can create withdrawals" ON public.withdrawals FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can read their own row" ON public.users FOR SELECT USING ((auth.uid() = id));
CREATE POLICY "Users can update their own blog posts" ON public.blog_posts FOR UPDATE USING ((auth.uid() = author_id));
CREATE POLICY "Users can update their own comments" ON public.blog_comments FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own notifications" ON public.notifications FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own onboarding_complete" ON public.users FOR UPDATE USING ((auth.uid() = id)) WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can update their own projects" ON public.projects FOR UPDATE USING ((auth.uid() = contributor_id));
CREATE POLICY "Users can update their own reviews" ON public.project_reviews FOR UPDATE USING ((auth.uid() = reviewer_id));
CREATE POLICY "Users can view their own blog posts" ON public.blog_posts FOR SELECT USING ((auth.uid() = author_id));
CREATE POLICY "Users can view their own comments" ON public.blog_comments FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own downloads" ON public.downloads FOR SELECT USING ((auth.uid() = downloaded_by));
CREATE POLICY "Users can view their own notifications" ON public.notifications FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own projects" ON public.projects FOR SELECT USING ((auth.uid() = contributor_id));
CREATE POLICY "Users can view their own reviews" ON public.project_reviews FOR SELECT USING ((auth.uid() = reviewer_id));
CREATE POLICY "Users can view their own transactions" ON public.transactions FOR SELECT USING ((auth.uid() = contributor_id));
CREATE POLICY "Users can view their own withdrawals" ON public.withdrawals FOR SELECT USING ((auth.uid() = user_id));

-- Enable RLS
ALTER TABLE public.blog_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.blog_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.downloads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.programs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.project_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.project_versions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.teams ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.universities ENABLE ROW LEVEL SECURITY;
-- Additional universities policies
CREATE POLICY universities_delete_admin ON public.universities FOR DELETE USING (public.is_admin());
CREATE POLICY universities_insert_admin ON public.universities FOR INSERT WITH CHECK (public.is_admin());
CREATE POLICY universities_read_all ON public.universities FOR SELECT USING (true);
CREATE POLICY universities_update_admin ON public.universities FOR UPDATE USING (public.is_admin()) WITH CHECK (public.is_admin());
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.withdrawals ENABLE ROW LEVEL SECURITY;

-- Grants
GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;

GRANT ALL ON FUNCTION public.get_metric_trend(text,timestamptz,timestamptz) TO anon;
GRANT ALL ON FUNCTION public.get_metric_trend(text,timestamptz,timestamptz) TO authenticated;
GRANT ALL ON FUNCTION public.get_metric_trend(text,timestamptz,timestamptz) TO service_role;
GRANT ALL ON FUNCTION public.get_top_contributors(int,timestamptz,timestamptz) TO anon;
GRANT ALL ON FUNCTION public.get_top_contributors(int,timestamptz,timestamptz) TO authenticated;
GRANT ALL ON FUNCTION public.get_top_contributors(int,timestamptz,timestamptz) TO service_role;
GRANT ALL ON FUNCTION public.get_top_projects(int,timestamptz,timestamptz) TO anon;
GRANT ALL ON FUNCTION public.get_top_projects(int,timestamptz,timestamptz) TO authenticated;
GRANT ALL ON FUNCTION public.get_top_projects(int,timestamptz,timestamptz) TO service_role;
GRANT ALL ON FUNCTION public.handle_project_download() TO anon;
GRANT ALL ON FUNCTION public.handle_project_download() TO authenticated;
GRANT ALL ON FUNCTION public.handle_project_download() TO service_role;
GRANT ALL ON FUNCTION public.handle_withdrawal_status_change() TO anon;
GRANT ALL ON FUNCTION public.handle_withdrawal_status_change() TO authenticated;
GRANT ALL ON FUNCTION public.handle_withdrawal_status_change() TO service_role;
GRANT ALL ON FUNCTION public.increment_project_views(uuid) TO anon;
GRANT ALL ON FUNCTION public.increment_project_views(uuid) TO authenticated;
GRANT ALL ON FUNCTION public.increment_project_views(uuid) TO service_role;
GRANT ALL ON FUNCTION public.is_admin() TO anon;
GRANT ALL ON FUNCTION public.is_admin() TO authenticated;
GRANT ALL ON FUNCTION public.is_admin() TO service_role;
GRANT ALL ON FUNCTION public.update_project_rating() TO anon;
GRANT ALL ON FUNCTION public.update_project_rating() TO authenticated;
GRANT ALL ON FUNCTION public.update_project_rating() TO service_role;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO anon;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO service_role;

GRANT ALL ON TABLE public.blog_comments TO anon;
GRANT ALL ON TABLE public.blog_comments TO authenticated;
GRANT ALL ON TABLE public.blog_comments TO service_role;
GRANT ALL ON TABLE public.blog_posts TO anon;
GRANT ALL ON TABLE public.blog_posts TO authenticated;
GRANT ALL ON TABLE public.blog_posts TO service_role;
GRANT ALL ON TABLE public.courses TO anon;
GRANT ALL ON TABLE public.courses TO authenticated;
GRANT ALL ON TABLE public.courses TO service_role;
GRANT ALL ON TABLE public.downloads TO anon;
GRANT ALL ON TABLE public.downloads TO authenticated;
GRANT ALL ON TABLE public.downloads TO service_role;
GRANT ALL ON TABLE public.notifications TO anon;
GRANT ALL ON TABLE public.notifications TO authenticated;
GRANT ALL ON TABLE public.notifications TO service_role;
GRANT ALL ON TABLE public.programs TO anon;
GRANT ALL ON TABLE public.programs TO authenticated;
GRANT ALL ON TABLE public.programs TO service_role;
GRANT ALL ON TABLE public.project_reviews TO anon;
GRANT ALL ON TABLE public.project_reviews TO authenticated;
GRANT ALL ON TABLE public.project_reviews TO service_role;
GRANT ALL ON TABLE public.project_versions TO anon;
GRANT ALL ON TABLE public.project_versions TO authenticated;
GRANT ALL ON TABLE public.project_versions TO service_role;
GRANT ALL ON TABLE public.projects TO anon;
GRANT ALL ON TABLE public.projects TO authenticated;
GRANT ALL ON TABLE public.projects TO service_role;
GRANT ALL ON TABLE public.team_members TO anon;
GRANT ALL ON TABLE public.team_members TO authenticated;
GRANT ALL ON TABLE public.team_members TO service_role;
GRANT ALL ON TABLE public.teams TO anon;
GRANT ALL ON TABLE public.teams TO authenticated;
GRANT ALL ON TABLE public.teams TO service_role;
GRANT ALL ON TABLE public.transactions TO anon;
GRANT ALL ON TABLE public.transactions TO authenticated;
GRANT ALL ON TABLE public.transactions TO service_role;
GRANT ALL ON TABLE public.universities TO anon;
GRANT ALL ON TABLE public.universities TO authenticated;
GRANT ALL ON TABLE public.universities TO service_role;
GRANT ALL ON TABLE public.users TO anon;
GRANT ALL ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;
GRANT ALL ON TABLE public.withdrawals TO anon;
GRANT ALL ON TABLE public.withdrawals TO authenticated;
GRANT ALL ON TABLE public.withdrawals TO service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO service_role;
RESET ALL;
